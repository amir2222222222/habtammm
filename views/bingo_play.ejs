<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Bingo Game</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      position: relative;
      font-family: Arial, sans-serif;
      height: 100vh;
      width: 100%;
      display: grid;
      grid-template-columns: 2fr 10fr;
      grid-template-rows: 100%;
      gap: 10px;
      padding: 5px;
      overflow: hidden;
      background-color: #ffffff;

    }

    .line-win {
      background-color: limegreen;
      color: white;
      font-weight: bold;
    }

    .sidebar {
      position: relative;
      display: grid;
      grid-template-rows: 1fr 3fr;
      grid-template-columns: 100%;
      gap: 10px;
    }

    .main-panel {
      display: grid;
      grid-template-rows: 9fr 4fr;
      grid-template-columns: 100%;
      gap: 10px;
    }

    .sidebar-records {
      position: relative;
      display: grid;
      grid-template-rows: 1fr 3fr 2fr;
      grid-template-columns: 100%;
      gap: 5px;

    }

    .record-title {
      background-color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      color: rgb(38, 0, 255);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 1.2rem;
      border: 2px solid black;
    }

    .record-table-container {
      border: 10px solid #00098e;
      display: grid;
      grid-template-rows: 1fr 6fr;
      border-radius: 10px;
    }

    .table-header {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      background-color: #00098e;
    }

    .table-header div {

      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;
      color: aliceblue;
      background-color: #00098e;
    }

    .start {
      width: 100px;
    }

    .record-grid {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: repeat(5, 1fr);
      background-color: #000;
      border: 2px solid white;
    }

    .record-cell {
      background-color: #ffffff;
      color: #00487b;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2rem;


    }

    .input-checker {
      margin-top: 10px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 10px;
    }

    .input-checker input {
      border: 2px solid black;
      box-shadow: 0 2px 10px rgba(0, 123, 255, 0.2);
      font-size: 2rem;
      height: 50px;
      width: 100%;
      text-align: center;
      border-radius: 10px;
    }

    .input-checker button {

      height: 40px;
      width: 80%;
      border-radius: 5px;
      background-color: #00098e;
      border: 5px solid rgba(0, 0, 0, 0.56);
      color: rgb(208, 255, 0);
      font-family: 'Gill Sans', sans-serif;
    }

    .top-board {
      display: grid;
      grid-template-rows: 4fr 1fr;
      grid-template-columns: 100%;
      gap: 10px;
    }

    .bingo-grid {
      display: grid;
      grid-template-columns: 1fr 16fr;
      gap: 1px;
      color: #000000;

    }

    .bingo-labels {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: 100%;
      gap: 1px;
      color: #ffffff;
      font-size: 2rem;
      align-items: center;
      justify-content: center;
      text-align: center;

    }

    .bingo-labels div {
      background: #0004ff;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .bingo-numbers {
      display: grid;
      grid-template-rows: repeat(5, 1fr);
      grid-template-columns: repeat(15, 1fr);
      gap: 1px;
    }

    /* Blink animation */
    @keyframes blink {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.3;
      }

      100% {
        opacity: 1;
      }
    }

    /* Current class gets the blink */
    .current {
      animation: blink 1s infinite;
      /* Optional: visually distinguish current number */
      border: 2px solid #ff9800;
      background-color: #fff200;
      color: #000;
      /* Light yellow */
    }

    .bingo-cell {
      background-color: #0000008d;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 3rem;
      border: 1px solid rgba(0, 0, 0, 0.816);
    }

    .controls {
      display: grid;
      grid-template-columns: 2fr 4fr;
      grid-template-rows: 100%;
      gap: 10px;
    }

    .info-display {
      display: grid;
      grid-template-rows: 1fr 1fr;
      text-align: left;
      padding: 5px;

    }

    .info-display h1 {
      font-size: 2em;
      color: #161515;
      padding: 5px;
    }

    .button-group {
      display: flex;
      justify-content: space-between;
      padding-left: 10px;
      padding-right: 10px;
      gap: 10px;
    }


    .button-group button {
      background-color: #000dff;
      color: #fff;
      border: 5px solid rgba(88, 32, 32, 0.367);
      border-radius: 50%;
      font-size: 1rem;
      box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.4);
      cursor: pointer;
      width: 120px;
      border: 5px solid white;
      transition: all 0.1s ease-in-out;
    }

    .button-group button:hover {
      background-color: #1e2022;
      transform: scale(1.05);
      box-shadow: 3px 3px 8px rgba(255, 255, 255, 0.5);
    }

    .button-group button:active {
      transform: scale(0.95);
      background-color: #023268;
      box-shadow: inset 2px 2px 4px rgba(255, 255, 255, 0.4);
    }

    .bottom-display {
      display: grid;
      grid-template-columns: 3fr 3fr;
      gap: 10px;
    }

    .logo-area {
      background-color: #2c2c3e;
      /* Dark background to match other elements */
      color: #ffd700;
      /* Gold color for text */
      font-size: 7rem;
      font-weight: bold;
      text-align: center;
      padding: 20px;
      border-radius: 10px;
      min-height: 80px;
      /* Ensures visible area even if empty */
      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.7);
      display: flex;
      align-items: center;
      justify-content: center;
      text-shadow: 1px 1px 3px black;
    }


    .called-numbers {
      background-color: #333;
      border-radius: 10px;
      color: #fff;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 10px;
      gap: 5px;
      font-family: 'Courier New', Courier, monospace;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
    }


    .callednumbers {
      font-size: 5rem;
      font-weight: bold;
      color: #0ff;
    }


    .called-numbers .small {
      font-size: 1rem;
      color: #ccc;
    }



    .record-cell.joker {
      background-color: gold;
      border: 2px solid rgb(9, 70, 0);
      color: rgb(0, 0, 0);
    }

    .record-cell.line-win {
      border: 2px solid rgb(0, 9, 77);
      background-color: rgb(0, 37, 146);
      color: rgb(255, 255, 255);
    }


    .win-pattern {
      background-color: limegreen !important;
      animation: blink 1s infinite;
      color: white;
      font-weight: bold;
    }



    @keyframes shake {
      0% {
        transform: translate(1px, 1px);
      }

      5% {
        transform: translate(-2px, -1px);
      }

      10% {
        transform: translate(-3px, 6px);
      }

      15% {
        transform: translate(2px, -1px);
      }

      20% {
        transform: translate(-2px, 3px);
      }

      25% {
        transform: translate(1px, -2px);
      }

      30% {
        transform: translate(-3px, 0px);
      }

      35% {
        transform: translate(4px, 2px);
      }

      40% {
        transform: translate(-1px, -3px);
      }

      45% {
        transform: translate(3px, 1px);
      }

      50% {
        transform: translate(-2px, 9px);
      }

      55% {
        transform: translate(1px, -1px);
      }

      60% {
        transform: translate(3px, 0px);
      }

      65% {
        transform: translate(-1px, 2px);
      }

      70% {
        transform: translate(2px, -3px);
      }

      75% {
        transform: translate(-4px, 1px);
      }

      80% {
        transform: translate(3px, 4px);
      }

      85% {
        transform: translate(-2px, -4px);
      }

      90% {
        transform: translate(1px, 3px);
      }

      95% {
        transform: translate(-3px, -9px);
      }

      100% {
        transform: translate(1px, 1px);
      }
    }

    .shake {
      animation: shake 2.5s ease-in-out;
    }

    .record-cell {

      font-size: 1rem;
      border: 2px solid white;
    }


    .joker {
      background-color: yellow;
      color: black;
      font-weight: bold;
    }

    button.disabled-anim {
      opacity: 0.5;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .win-pattern {
      background-color: limegreen !important;
      animation: blink 1s infinite;
      color: white;
      font-weight: bold;
    }

    @keyframes blink {
      0% {
        background-color: limegreen;
        border: 5px solid rgba(88, 32, 32, 0.367);
      }

      50% {
        background-color: darkgreen;
        border: 5px solid rgba(88, 32, 32, 0.367);
      }

      100% {
        background-color: limegreen;
        border: 5px solid rgba(88, 32, 32, 0.367);
      }
    }

    .record-cell.checked {
      background-color: green;
      color: white;
    }

    .record-cell.joker {
      background-color: gold;
    }

    .record-cell.line-win {
      background-color: rgba(0, 128, 0, 0.401);
      border: 2px solid red;
      color: rgb(0, 0, 0);
    }

    .sidebar-logo {
      width: 100%;
      height: 100%;
      background: #ffffff;
    }

    .sidebar-logo-img {
      width: 100%;
      height: 100%;
      background-image: url('Logo.png');
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
    }


    .bingo-cell.current {
      background-color: #ff0059;
      color: #ffffff;
      font-weight: bold;
      animation: pulse 1s infinite;
      border: 3px solid rgba(118, 0, 0, 0.367);
    }

    .bingo-cell.highlight {
      background-color: #000000;
      color: white;
    }

    /* Optional animation */
    @keyframes pulse {
      0% {
        transform: scale(1);
      }

      50% {
        transform: scale(1.2);
      }

      100% {
        transform: scale(1);
      }
    }

    .record-title {
      display: flex;
      align-items: center;
      justify-content: center;
      color: #ffffff;
      background: #002d75;
      text-align: center;
      width: 100%;
      height: auto;
      /* Change this to auto for flexibility */
      word-break: break-word;
      border-radius: 5px;
    }

    /* Info Display Container */
    .info-display {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: #d3cdcd;
      border-radius: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    /* Winner Heading */
    .info-display .winner {
      font-size: 30px;
      color: #28a745;
      /* Green for winner */
      font-weight: bold;
    }

    /* Betbirr Heading */
    .info-display .betbirr {
      font-size: 20px;
      color: #007bff;
      /* Blue for bet amount */
      font-weight: 600;
    }

    /* Money Sign Styling */
    .info-display .winner::after,
    .info-display .betbirr::after {
      content: "ETB ";
      /* Ethiopian Birr */
      margin-left: 5px;
      color: #6c757d;
      /* Gray color */
    }

    /* Responsive Design */
    @media (max-width: 576px) {
      .info-display .winner {
        font-size: 20px;
      }

      .info-display .betbirr {
        font-size: 16px;
      }
    }
  </style>
</head>

<body>
  <div class="sidebar">
    <div class="sidebar-logo">
      <div class="sidebar-logo-img"></div>
    </div>
    <div class="sidebar-records">
      <div class="record-title"></div>
      <div class="record-table-container">
        <div class="table-header">
          <div>B</div>
          <div>I</div>
          <div>N</div>
          <div>G</div>
          <div>O</div>
        </div>
        <div class="record-grid"></div>
      </div>
      <div class="input-checker">
        <input type="text" class="cart-input" />
        <button class="cart-submite">Check</button>
        <button id="lock" class="lock">lock</button>
      </div>
    </div>
  </div>

  <div class="main-panel">
    <div class="top-board">
      <div class="bingo-grid">
        <div class="bingo-labels">
          <div>B</div>
          <div>I</div>
          <div>N</div>
          <div>G</div>
          <div>O</div>
        </div>
        <div class="bingo-numbers"></div>
      </div>
      <div class="controls">
        <div class="info-display">
          <h1 class="winner">winner: <%= winningamount %> birr</h1>
          <h1 class="betbirr">Betbirr: <%= betbirr %> birr</h1>
        </div>
        <div class="button-group">
          <button id="shuffle">SHUFFLE</button>
          <button class="start" id="start">START</button>
          <button id="pause">PAUSE</button>
          <button id="reset">RESET</button>
        </div>
      </div>
    </div>
    <div class="bottom-display">
      <div class="logo-area"></div>
      <div class="called-numbers">
        <span class="callednumbers">--</span>
        <div class="small">Called Numbers</div> <!-- ✅ FIXED -->
      </div>

    </div>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      // === Save server data to localStorage ===
      localStorage.setItem('WinningAmount', '<%= winningamount %>');
      localStorage.setItem('BetBirr', '<%= betbirr %>');
      localStorage.setItem('LineChacker', '<%= linechaker %>');
      localStorage.setItem('TotalBet', '<%= totalbet %>');
      localStorage.setItem('RequiredBalance', '<%= requiredbalance %>');
      localStorage.setItem('VoiceType', '<%= voicetype %>');
      localStorage.setItem('GameSpeed', '<%= gamespeed %>');
      localStorage.setItem('Patterns', '<%- JSON.stringify(patterns) %>');
      localStorage.setItem('SelectedCarts', '<%- JSON.stringify(selectedcarts) %>');
      localStorage.setItem('Cartelas', '<%- JSON.stringify(cartelas) %>');

      console.log('All data saved independently to localStorage');

      // === Create loading overlay ===
      const loadingOverlay = document.createElement('div');
      loadingOverlay.id = 'voice-download-overlay';
      loadingOverlay.style.cssText = `
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.75);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5em;
  z-index: 9999;
  display: none;
`;
      loadingOverlay.innerHTML = `<div>Downloading voices... <span id="voice-progress">0/75</span></div>`;
      document.body.appendChild(loadingOverlay);

      // === IndexedDB helpers ===
      function openVoiceDB() {
        return new Promise((resolve, reject) => {
          const request = indexedDB.open('VoiceDB', 1);
          request.onupgradeneeded = e => {
            const db = e.target.result;
            if (!db.objectStoreNames.contains('voices')) {
              db.createObjectStore('voices', { keyPath: 'id' });
            }
          };
          request.onsuccess = e => resolve(e.target.result);
          request.onerror = e => reject(e.target.error);
        });
      }

      async function voiceExistsInDB(voice) {
        const db = await openVoiceDB();
        return new Promise((resolve, reject) => {
          const tx = db.transaction('voices', 'readonly');
          const store = tx.objectStore('voices');
          const getRequest = store.get(`${voice}_1`);
          getRequest.onsuccess = () => resolve(!!getRequest.result);
          getRequest.onerror = () => reject(getRequest.error);
        });
      }

      async function saveVoiceFile(voice, index, blob) {
        const db = await openVoiceDB();
        return new Promise((resolve, reject) => {
          const tx = db.transaction('voices', 'readwrite');
          const store = tx.objectStore('voices');
          store.put({ id: `${voice}_${index}`, voice, index, blob });
          tx.oncomplete = () => resolve();
          tx.onerror = () => reject(tx.error);
        });
      }

      // === Download and save a single voice file ===
      async function downloadVoiceFile(voice, index) {
        const url = `/mp3/${voice}/${voice}${index}.mp3`;
        const response = await fetch(url);
        if (!response.ok) throw new Error(`File not found: ${voice}${index}.mp3`);
        const blob = await response.blob();
        await saveVoiceFile(voice, index, blob);
      }

      // === Download all voice files sequentially with progress ===
      async function downloadAllVoices(voice) {
        loadingOverlay.style.display = 'flex';
        const progressSpan = document.getElementById('voice-progress');
        try {
          for (let i = 1; i <= 75; i++) {
            await downloadVoiceFile(voice, i);
            progressSpan.textContent = `${i}/75`;
          }
          loadingOverlay.style.display = 'none';
          return true;
        } catch (err) {
          alert('Warning: Some voice files were not found. Please check your voice selection.');
          console.error(err);
          loadingOverlay.style.display = 'none';
          return false;
        }
      }

      // === On page load: check and auto-download if missing ===
      window.addEventListener('DOMContentLoaded', async () => {
        const voiceType = 'Recommended_Black_Male_Voice';
        try {
          const exists = await voiceExistsInDB(voiceType);
          if (!exists) {
            const success = await downloadAllVoices(voiceType);
            if (success) console.log('Voice download finished.');
            else console.warn('Voice download incomplete or failed.');
          } else {
            console.log('Voice files already present in IndexedDB.');
          }
        } catch (e) {
          console.error('Error checking or downloading voices:', e);
        }
      });


      const record_grid = document.querySelector(".record-grid");
      const game_grid = document.querySelector(".bingo-numbers");
      const startBtn = document.getElementById("start");
      const pauseBtn = document.getElementById("pause");
      const shuffleBtn = document.getElementById("shuffle");
      const resetBtn = document.getElementById("reset");
      const cartInput = document.querySelector(".cart-input");
      const cartSubmit = document.querySelector(".cart-submite");
      const lockBtn = document.getElementById("lock");
      const record_title = document.querySelector(".record-title");
      const calledDisplay = document.querySelector(".callednumbers");
      const uncalledDisplay = document.querySelector(".uncallednumbers");
      const logoArea = document.querySelector(".logo-area");

      const voiceType = localStorage.getItem('VoiceType') || 'Recommended_Black_Male_Voice';
      const gameSpeed = parseFloat(localStorage.getItem('GameSpeed')) || 2;

      function initRecordGrid() {
        record_grid.innerHTML = "";
        for (let i = 1; i <= 25; i++) {
          const cell = document.createElement("div");
          cell.className = "record-cell";
          cell.textContent = "O";
          record_grid.appendChild(cell);
        }
      }

      function initBingoGrid() {
        game_grid.innerHTML = "";
        for (let i = 1; i <= 75; i++) {
          const cell = document.createElement("div");
          cell.id = i;
          cell.className = "bingo-cell";
          cell.textContent = i;
          game_grid.appendChild(cell);
        }
      }

      function openDB() {
        return new Promise((resolve, reject) => {
          const request = indexedDB.open("VoiceDB", 1);
          request.onerror = () => reject("Error opening IndexedDB");
          request.onsuccess = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains("voices")) {
              reject("Object store 'voices' not found");
              return;
            }
            resolve(db);
          };
          request.onupgradeneeded = (event) => {
            const db = event.target.result;
            if (!db.objectStoreNames.contains("voices")) {
              db.createObjectStore("voices", { keyPath: "id" });
            }
          };
        });
      }

      function getVoiceBlob(db, number) {
        return new Promise((resolve, reject) => {
          const key = `${voiceType}_${number}`;
          const tx = db.transaction("voices", "readonly");
          const store = tx.objectStore("voices");
          const request = store.get(key);
          request.onsuccess = () => {
            const result = request.result;
            result?.blob ? resolve(result.blob) : reject(`Voice not found for ${key}`);
          };
          request.onerror = () => reject("Error fetching from IndexedDB");
        });
      }




      let gameStarted = false;
      let hasStarted = false;
      let isPaused = false;
      let intervalActive = false;
      let intervalId = null;
      let shuffleUsed = false;
      let index = 0;
      let numbers = [];
      let currentIndex = 0;



      function playVoiceFromBlob(blob, number) {
        const audioURL = URL.createObjectURL(blob);
        const audio = new Audio(audioURL);

        audio.onplaying = () => {
          const prefix = number <= 15 ? "B" :
            number <= 30 ? "I" :
              number <= 45 ? "N" :
                number <= 60 ? "G" : "O";
          if (logoArea) {
            logoArea.textContent = `${prefix} ${number}`;
          }
        };

        audio.onended = () => URL.revokeObjectURL(audioURL);
        audio.play().catch(err => console.error("Audio error:", err));
      }

      function highlightNumber(number) {
        document.querySelectorAll(".bingo-cell.current").forEach(cell => {
          cell.classList.remove("current");
          cell.classList.add("highlight");
        });

        const currentCell = document.getElementById(number);
        if (currentCell) {
          currentCell.classList.add("current");
        }

        updateCalledUncalledCount();
      }

      function updateCalledUncalledCount() {
        const called = document.querySelectorAll(".bingo-cell.highlight, .bingo-cell.current").length;
        calledDisplay.textContent = called;
      }

      function setGameState(started, paused, active) {
        hasStarted = started;
        isPaused = paused;
        gameStarted = started;
        intervalActive = active;
        updateButtons();
      }

      function updateButtons() {
        startBtn.disabled = hasStarted && !isPaused;
        pauseBtn.disabled = !hasStarted || isPaused;
        resetBtn.disabled = !hasStarted || !isPaused;
        cartSubmit.disabled = !hasStarted || !isPaused;
        shuffleBtn.disabled = shuffleUsed || hasStarted;
        lockBtn.disabled = !hasStarted || !isPaused || !cartInput.value.trim();

        [startBtn, pauseBtn, resetBtn, cartSubmit, shuffleBtn, lockBtn].forEach(btn => {
          btn.classList.toggle("disabled-anim", btn.disabled);
        });
      }

      // === LOGGING NUMBERS ===
      const calledNumbers = new Set(); // Track played numbers globally

      async function startLoggingNumbers(fromIndex = 0) {
        index = fromIndex;
        clearInterval(intervalId);
        isPaused = false;
        setGameState(true, false, true);

        let db;
        try {
          db = await openDB();
        } catch (err) {
          console.error("IndexedDB open failed:", err);
          return;
        }

        // Skip already-called numbers
        while (index < numbers.length && calledNumbers.has(numbers[index])) {
          index++;
        }

        // Start calling numbers at game speed immediately
        intervalId = setInterval(async () => {
          // Skip already-called numbers during interval
          while (index < numbers.length && calledNumbers.has(numbers[index])) {
            index++;
          }

          // End condition
          if (isPaused || index >= numbers.length) {
            clearInterval(intervalId);
            setGameState(true, true, false);
            gameStarted = false;
            return;
          }

          const number = numbers[index];
          console.log(`Playing: ${number}`);
          highlightNumber(number);

          try {
            const blob = await getVoiceBlob(db, number);
            playVoiceFromBlob(blob, number);
          } catch (err) {
            console.error("Voice error:", err);
          }

          calledNumbers.add(number); // Mark as called
          index++;
        }, gameSpeed * 1000); // ⏱ Uses dynamic speed for all calls, including the first
      }


      initRecordGrid();
      initBingoGrid();
      updateCalledUncalledCount();

      cartSubmit.disabled = true;
      lockBtn.disabled = true;
      lockBtn.classList.add("disabled-anim");
      cartSubmit.classList.add("disabled-anim");
      pauseBtn.classList.add("disabled-anim");
      resetBtn.classList.add("disabled-anim");

      let firstReceived = false;
      let cachedNumbers = [];
      const errorQueue = [];
      let isShowingError = false;

      startBtn.addEventListener("click", () => {
        if (!hasStarted || isPaused) {
          // Lock all interactive buttons for now
          cartSubmit.disabled = true;
          lockBtn.disabled = true;
          startBtn.disabled = true;

          // Temporary success handler
          const handleNumbers = (data) => {
            if (!Array.isArray(data)) return;
            playSound.play().catch(() => { });
            socket.off("displayNumbers", handleNumbers);
            socket.off("errorMsg", handleError);

            numbers = data;
            console.log("✅ Received numbers:", numbers);

            hasStarted = true;
            gameStarted = true;
            firstReceived = true;
            cachedNumbers = data;

            cartSubmit.disabled = false;
            lockBtn.disabled = false;

            lockBtn.classList.remove("disabled-anim");


            cartInput.value = "";
            initRecordGrid();
            record_title.textContent = " የ ተጫዋች ካርተላ መፈተሻ እና ዉጤት ማሳያ ቦታ ";

            setGameState(true, false, true);
            startLoggingNumbers();
          };

          // Temporary error handler
          const handleError = (msg) => {
            socket.off("displayNumbers", handleNumbers);
            socket.off("errorMsg", handleError);

            alert(`⚠️ ${msg}`);
            startBtn.disabled = false;
          };

          socket.once("displayNumbers", handleNumbers);
          socket.once("errorMsg", handleError);

          socket.emit("sendNumbers");
        }
      });

      pauseBtn.addEventListener("click", () => {
        if (hasStarted && !isPaused) {
          pauseSound.play().catch(() => { });
          setGameState(true, true, false);
        }
      });

      resetBtn.addEventListener("click", () => {
        window.location.href = "/home";

      });

      shuffleBtn.addEventListener("click", () => {
        if (!shuffleUsed && !hasStarted) {
          shuffleSound.play();
          shuffleUsed = true;
          document.body.classList.add("shake");
          setTimeout(() => document.body.classList.remove("shake"), 1000);
          updateButtons();
        }
      });


      let lockedCartelas = [];

      lockBtn.addEventListener("click", () => {
        if (gameStarted) {
          record_title.textContent = "❌ ጨዋታው ገና አልጀመረም !";
          return;
        }

        const value = cartInput.value.trim();
        const cartNumber = parseInt(value, 10);
        if (isNaN(cartNumber)) {
          record_title.textContent = "❌ ለመፍታትም ሆነ ለመቆለፍ ያልተሳሳተ የካርተላ ቁጥር ያስገቡ";
          return;
        }

        const isLocked = lockedCartelas.includes(cartNumber);
        lockBtn.textContent = "Lock";
        if (isLocked) {
          // 🔓 Unlock
          lockedCartelas = lockedCartelas.filter(n => n !== cartNumber);
          record_title.textContent = `🔓 ካርቴላ ቁጥር ${cartNumber} ተፈቅዷል`;
          initRecordGrid();
          evaluateWin(cells, lineChecker, cartNumber);
          lockBtn.textContent = "Lock";
        } else {
          // 🔒 Lock
          lockedCartelas.push(cartNumber);
          record_title.textContent = `🔒 ካርቴላ ቁጥር ${cartNumber} ተቆልፏል`;
          initRecordGrid();
          const allCells = record_grid.querySelectorAll(".record-cell");
          allCells.forEach(cell => {
            cell.textContent = "O";
            cell.classList.remove("checked", "joker");
          });
          lockBtn.textContent = "UnLock";
        }

        lockBtn.classList.remove("disabled-anim");
      });





      // 🔁 Handle error queue globally (outside Start click)
      socket.on("errorMsg", (msg) => {
        errorQueue.push(msg);
        showNextError();
      });

      function showNextError() {
        if (isShowingError || errorQueue.length === 0) return;
        isShowingError = true;
        const msg = errorQueue.shift();
        alert(`⚠️ ${msg}`);
        setTimeout(() => {
          isShowingError = false;
          showNextError();
        }, 500);
      }

      // 🔌 Disconnect/reconnect logic
      socket.on("disconnect", () => {
        console.warn("🚫 Disconnected from server.");
        gameStarted = false;
      });

      socket.on("connect", () => {
        console.log("🔁 Reconnected to server.");

        setTimeout(() => {
          if (!gameStarted && cachedNumbers.length > 0) {
            console.log("♻️ Using cached numbers after reconnect:", cachedNumbers);
            numbers = cachedNumbers;
            gameStarted = true;
            startLoggingNumbers();
          }
        }, 1000);
      });



      const Patterns = localStorage.getItem('Patterns') || '["h", "v", "d", "sc", "lc"]';

      function handleCartSubmit() {
        initRecordGrid();

        if (!gameStarted && numbers.length === 0) {
          record_title.textContent = "❌ ጨዋታው ገና አልተጀመረም !";
          return;
        }

        const cartNumber = parseInt(cartInput.value.trim(), 10);
        if (isNaN(cartNumber) || cartNumber < 1 || cartNumber > 150) {
          record_title.textContent = "❌ ከካርቴላ ቁጥር ከ (1-150) ዉጪ ሲስተሞ ላይ አልተመዘገበምአልተመዘገበም !";
          return;
        }

        const cartelas = JSON.parse(localStorage.getItem("Cartelas") || "[]");
        const cartela = cartelas.find(c => c.cart_number === cartNumber);

        if (!cartela || !cartela.grid) {
          record_title.textContent = `❌ ካርቴላ ቁጥር ${cartNumber} አልተመዘገበም።`;
          return;
        }

        // Use the global lockedCartelas array here
        const isLocked = lockedCartelas.includes(cartNumber);
        window.lastChakeTime = new Date().toISOString();

        if (isLocked) {
          record_title.textContent = `🔒 ካርቴላ ቁጥር ${cartNumber} ተቆልፏል.`;
          lockBtn.textContent = "Unlock";
          lockBtn.disabled = false;
          lockBtn.classList.remove("disabled-anim");
          return;
        }

        // Populate record grid with cartela values
        const grid = cartela.grid;
        const highlightedCells = Array.from(document.querySelectorAll(".bingo-cell.highlight, .bingo-cell.current"))
          .map(cell => cell.textContent.trim())
          .filter(text => text !== "");

        record_grid.innerHTML = "";
        grid.flat().forEach(value => {
          const cell = document.createElement("div");
          cell.className = "record-cell";
          cell.textContent = value;
          if (value === "free") {
            cell.classList.add("joker");
          }
          if (value !== "free" && highlightedCells.includes(String(value))) {
            cell.classList.add("checked");
          }
          record_grid.appendChild(cell);
        });

        if (!checkedCartNumbers.includes(cartNumber)) {
          checkedCartNumbers.push(cartNumber);
          localStorage.setItem("checkedCartNumbers", JSON.stringify(checkedCartNumbers));
        }

        const lineChecker = parseInt(localStorage.getItem("LineChacker") || "1", 10);
        const cellNodes = Array.from(record_grid.children);
        evaluateWin(cellNodes, lineChecker, cartNumber);

        lockBtn.textContent = "Lock";
        lockBtn.disabled = false;
        lockBtn.classList.remove("disabled-anim");
      }


      cartSubmit.addEventListener("click", handleCartSubmit);
      cartInput.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          handleCartSubmit();
        }
      });

      let checkedCartNumbers = JSON.parse(localStorage.getItem("checkedCartNumbers") || "[]");

      function evaluateWin(cells, lineChecker, cartNumber) {
        const size = 5;
        let winCount = 0;
        let lastNumberMatched = false;
        let luckyPassed = false;


        function isCellChecked(row, col) {
          const index = row * size + col;
          const cell = cells[index];
          return cell && (cell.classList.contains("checked") || cell.classList.contains("joker"));
        }

        function getCell(row, col) {
          return cells[row * size + col];
        }

        const logoText = logoArea.textContent.trim();
        const lastCalledNumber = parseInt(logoText.split(" ")[1], 10);
        const patterns = JSON.parse(localStorage.getItem("Patterns") || '["h", "v", "d", "sc", "lc"]');

        cells.forEach(cell => cell.classList.remove("line-win"));
        const lines = [];

        // Horizontal lines
        if (patterns.includes("h")) {
          for (let row = 0; row < size; row++) {
            const line = [0, 1, 2, 3, 4].map(col => getCell(row, col));
            if (line.every((_, i) => isCellChecked(row, i))) {
              lines.push(line);
            }
          }
        }

        // Vertical lines
        if (patterns.includes("v")) {
          for (let col = 0; col < size; col++) {
            const line = [0, 1, 2, 3, 4].map(row => getCell(row, col));
            if (line.every((_, i) => isCellChecked(i, col))) {
              lines.push(line);
            }
          }
        }

        // Diagonal lines (d)
        if (patterns.includes("d")) {
          const diag1 = [0, 1, 2, 3, 4].map(i => getCell(i, i));
          if (diag1.every((_, i) => isCellChecked(i, i))) lines.push(diag1);

          const diag2 = [0, 1, 2, 3, 4].map(i => getCell(i, size - 1 - i));
          if (diag2.every((_, i) => isCellChecked(i, size - 1 - i))) lines.push(diag2);
        }

        // Small corners (sc)
        if (patterns.includes("sc")) {
          const scCells = [
            getCell(1, 1),
            getCell(1, 3),
            getCell(3, 1),
            getCell(3, 3),
          ];
          if (scCells.every(cell => cell && (cell.classList.contains("checked") || cell.classList.contains("joker")))) {
            lines.push(scCells);
          }
        }

        // Large corners (lc)
        if (patterns.includes("lc")) {
          const lcCells = [
            getCell(0, 0),
            getCell(0, 4),
            getCell(4, 0),
            getCell(4, 4),
          ];
          if (lcCells.every(cell => cell && (cell.classList.contains("checked") || cell.classList.contains("joker")))) {
            lines.push(lcCells);
          }
        }

        const uniqueMatched = new Set();
        lines.forEach(line => {
          let lineContainsLast = false;
          line.forEach(cell => {
            if (cell.textContent === String(lastCalledNumber)) lineContainsLast = true;
            uniqueMatched.add(cell);
          });

          winCount++;
          if (lineContainsLast) lastNumberMatched = true;
          line.forEach(cell => cell.classList.add("line-win"));
        });

        let winner = false;

        if (winCount >= lineChecker && lastNumberMatched) {
          record_title.textContent = `🎉 ካርቴላ ቁጥር ${cartNumber} ከ ${winCount}/${lineChecker} ዝግ በመዝጋት አሸንፏል ✅`;
          winner = true;
          luckyPassed = true;
          winnerSound.play(); // Play winner sound
        } else if (winCount >= lineChecker && !lastNumberMatched) {
          record_title.textContent = `❌ ካርቴላ ቁጥር ${cartNumber} ከ ${winCount}/${lineChecker} ዝግ የዘጋበት እድሉ አልፏል`;
          loserSound.play(); // Play loser sound
        } else {
          record_title.textContent = `❌ ካርቴላ ${cartNumber} አላሸነፈም (${winCount}/${lineChecker})`;
          loserSound.play(); // Play loser sound
        }

        socket.emit("chake", {
          cart: String(cartNumber),
          winner: winner,
          luckyPassed: luckyPassed
        });
      }


      // Declare variables to hold audio files
      let loserSound, winnerSound, playSound, shuffleSound, pauseSound;

      // Function to preload audio files
      function preloadAudio() {
        loserSound = new Audio('/buzz.mp3');
        winnerSound = new Audio('/winner.mp3');
        playSound = new Audio('/play.mp3');
        shuffleSound = new Audio('/shuffle.mp3');
        pauseSound = new Audio('/puase.mp3');

        // Preload them
        [buzzSound, winnerSound, playSound, shuffleSound, pauseSound].forEach(audio => audio.load());
      }

      // Call the preload function on page load
      window.addEventListener('DOMContentLoaded', () => {
        preloadAudio();
      });


    </script>



</body>

</html>

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bingo Fantasy</title>
  <!-- Google Fonts & Font Awesome -->

  <style>
  * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'MedievalSharp', cursive;
  max-height: 100vh;
  width: 100%;
  display: grid;
  grid-template-rows: 1fr 10fr 2fr;
  overflow: hidden;
  color: #fff;
}

.main_cont {
  background: #111;
}

.bingo_grid {
  padding: 5px;
  display: grid;
  grid-template-rows: auto 1fr;
  gap: 5px;
  background: rgb(0, 0, 0);
}

.bingo_pik_card {
  display: flex;
  align-items: flex-end;
}

.bingo_pik_card h1 {
  font-size: 1rem;
  padding-left: 20px;
  color: #fff;
}

.bingo_numbers {
  display: grid;
  padding: 5px;
  border-radius: 10px;
  grid-template-rows: repeat(10, 1fr);
  grid-template-columns: repeat(15, 1fr);
  gap: 5px;
}

.cell {
  background-color: #fff200;
  color: #000;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  font-weight: 800;
  border: 5px solid #cabc03;
  border-radius: 5px;
  cursor: pointer;
  transition: transform 0.2s ease, background-color 0.3s;
  position: relative;
}

.cell.toggled {
  background-color: #000 !important;
  color: #fff;
  border: 5px solid #fff;
}

.cell.toggled::after {
  content: attr(data-num);
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60px;
  height: 60px;
  background-color: rgb(255, 255, 255);
  color: #ff0000;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  font-size: 24px;
  font-weight: bold;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  animation: pop 0.4s ease-out forwards;
  pointer-events: none;
  z-index: 1000;
}

@keyframes pop {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: 0;
  }
  25% {
    transform: translate(-50%, -50%) scale(2);
    opacity: 1;
  }
  50% {
    transform: translate(-50%, -50%) scale(4);
    opacity: 1;
  }
  75% {
    transform: translate(-50%, -50%) scale(8);
    opacity: 0;
  }
  100% {
    transform: translate(-50%, -50%) scale(10);
    opacity: 0;
  }
}

.controllers {
  display: flex;
  align-items: center;
  justify-content: space-around;
  gap: 10px;
  flex-wrap: wrap;
  background: rgba(0, 66, 57, 0.874);
  border-top: 2px solid black;
  padding: 10px;
}

.controll {
  font-size: 1rem;
  background-color: #1a4265;
  border: 3px solid #fff;
  color: #ecf0f1;
  padding: 8px 16px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
  min-width: 100px;
  height: 40px;
}

.controll:hover {
  background-color: #7e8a00;
  color: #000;
  transform: scale(1.05);
}

.play {
  font-size: 1.5rem;
  font-weight: 900;
  letter-spacing: 2px;
  background-color: #1a4265;
  border: 3px solid #fff;
  padding: 30px 50px;
  border-radius: 10px;
  color: #fff;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
}

.play:hover {
  background-color: #04498e;
  color: #fff;
}

.input-box {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.input-label {
  font-size: 1.1rem;
  color: #ffffff;
}

.input-group {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  margin-bottom: 10px;
}

.display-input {
  background-color: #ecf0f1;
  color: #000;
  border: 3px solid #fff;
  width: 130px;
  height: 40px;
  font-size: 1.5rem;
  border-radius: 5px;
  text-align: center;
  font-weight: bold;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
}

.icon-button {
  background-color: #1a4265;
  color: white;
  border: 3px solid #fff;
  border-radius: 6px;
  padding: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s, transform 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 35px;
  height: 35px;
}

.icon-button:hover {
  background-color: #1e8449;
  transform: scale(1.1);
}

  </style>
  
</head>

<body>

 <%- include ('partials/header') -%>
  <div class="main_cont bingo_grid">
    <div class="bingo_pik_card">
      <h1><i class="fas fa-dice"></i> Pick a Card</h1>
    </div>
    <div class="bingo_numbers"></div>
  </div>

  <div class="main_cont controllers">

    <!-- ZG Input -->
    <div class="input-box">
      <span class="input-label"><i class="fas fa-layer-group"></i> ZG</span>
      <div class="input-group">
        <button class="icon-button" onclick="adjustValue('zg', -1)"><i class="fas fa-minus"></i></button>
        <input name="zg" type="text" id="zg" class="display-input" value="1" readonly>
        <button class="icon-button" onclick="adjustValue('zg', 1)"><i class="fas fa-plus"></i></button>
      </div>
    </div>

    <!-- Bet Birr Input -->
    <div class="input-box">
      <span class="input-label"><i class="fas fa-coins"></i> Bet Birr</span>
      <div class="input-group">
        <button class="icon-button" onclick="adjustValue('birr', -5)"><i class="fas fa-minus"></i></button>
        <input name="bet" type="text" id="birr" class="display-input" value="10" readonly>
        <button class="icon-button" onclick="adjustValue('birr', 5)"><i class="fas fa-plus"></i></button>
      </div>
    </div>

    <!-- Functional Buttons -->
    <button class="controll play" onclick="submitPlay()">Play</button>
    <button class="controll" onclick="startConsoleInput()"><i class="fas fa-random"></i>Inter Cartelas</button>
    <button class="controll" id="sync"></i><i class="fas fa-sync-alt"></i>Sync Previous</button>
  </div>

  <script>
          const grid = document.querySelector(".bingo_numbers");
          const selectedCells = new Set();

          // Generate 150 cards
          for (let i = 1; i <= 150; i++) {
            const cell = document.createElement("div");
            cell.className = "cell";
            cell.textContent = i;
            cell.setAttribute("data-num", i);
            cell.onclick = () => toggleCell(i, cell); // Ensure toggleCell is defined
            grid.appendChild(cell);
          }

          function toggleCell(number, cell) {
            if (selectedCells.has(number)) {
              selectedCells.delete(number);
              cell.classList.remove("toggled");
            } else {
              selectedCells.add(number);
              cell.classList.add("toggled");
            }
          }

          // Sync and other functionalities
          document.getElementById('sync').addEventListener('click', () => {
            const savedPayload = localStorage.getItem('gamePayload');
            if (!savedPayload) {
              alert("No saved data found.");
              return;
            }

            const payload = JSON.parse(savedPayload);
            const lineChakerInput = document.getElementById('zg');
            const betBirrInput = document.getElementById('birr');

            if (lineChakerInput) lineChakerInput.value = payload.linechaker || '';
            if (betBirrInput) betBirrInput.value = payload.betbirr || '';

            const selectedCarts = payload.selectedcarts || [];
            document.querySelectorAll('.cell').forEach(cell => {
              const cellId = Number(cell.dataset.num);
              if (selectedCarts.includes(cellId)) {
                cell.classList.add('toggled');
              } else {
                cell.classList.remove('toggled');
              }
            });

            selectedCells.clear();
            selectedCarts.forEach(num => selectedCells.add(num));
          });


    function submitPlay() {
      const zValue = parseInt(document.getElementById("zg").value);
      const bet = parseInt(document.getElementById("birr").value);

      if (!zValue || !bet || selectedCells.size === 0) {
        alert("Please select cards and fill bet details.");
        return;
      }

      const payload = {
        selectedcarts: Array.from(selectedCells),
        linechaker: zValue,
        betbirr: bet,
      };

      localStorage.setItem('gamePayload', JSON.stringify(payload));

      fetch("/home", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      })
       .then((res) => {
    if (res.redirected) {
        window.location.href = res.url;
    } else {
        return res.json();
    }
})
.then((data) => {
    console.log("Server response:", data);
})
.catch((err) => {
    console.error("Error submitting play:", err);
    showError("Server error while submitting bet.");
});

// Function to show error message
function showError(message) {
    const errorMessageElement = document.getElementById('error-message');
    errorMessageElement.textContent = message;
    errorMessageElement.style.display = 'block';

    setTimeout(() => {
        errorMessageElement.style.display = 'none';
    }, 1000); // 1 second timeout
}

    function adjustValue(field, change) {
      const input = document.getElementById(field);
      let value = parseInt(input.value) || 0;
      let newValue = value + change;

      if (field === "zg") {
        input.value = Math.max(1, Math.min(5, newValue));
      } else {
        input.value = Math.max(10, newValue);
      }
    }




    
    // Optional prompt-based card selection
    let consoleActive = false;

    function startConsoleInput() {
      consoleActive = true;
      handleConsoleInput();
    }

    function handleConsoleInput() {
      if (!consoleActive) return;

      setTimeout(() => {
        const input = prompt("Select Card (type 'ok' to finish):");

        if (input === null || input.toLowerCase() === "ok") {
          consoleActive = false;
          return;
        }

        const num = parseInt(input.trim());

        if (isNaN(num) || num < 1 || num > 150) {
          alert("Card unavailable");
        } else if (selectedCells.has(num)) {
          alert("Already picked, thank you");
        } else {
          selectedCells.add(num);
          grid.children[num - 1].classList.add("toggled");
        }

        handleConsoleInput();
      }, 100);
    }
  </script>

</body>

</html>


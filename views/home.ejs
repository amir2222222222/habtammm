
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bingo Fantasy</title>
  <!-- Google Fonts & Font Awesome -->
  <link href="https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap" rel="stylesheet">
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'MedievalSharp', cursive;
      height: 100vh;
      width: 100%;
      display: grid;
      grid-template-rows: 1fr 10fr 2fr;
      grid-template-columns: 100%;
      gap: 3px;
      overflow: hidden;
      color: #fff;
    }

    .main_cont {
       background: #111111;
    }
  

    .bingo_grid {
      padding: 5px;
      display: grid;
      grid-template-rows: 0.5fr 10fr;
      gap: 5px;
      background: rgba(0, 0, 0, 0.844);
      border-bottom:  solid 5px rgb(0, 0, 0);
    }

    .bingo_pik_card  {
      display: flex;
      align-items: end;
     
    }


    .bingo_pik_card h1 {
     
      font-size: 1rem;
      padding-left: 20px;
      color: #ffffff;
    }

    .bingo_numbers {
      display: grid;
      padding: 5px;
      border-radius: 10px;
      grid-template-rows: repeat(10, 1fr);
      grid-template-columns: repeat(15, 1fr);
      gap: 5px;
    }

    .cell {
      position: relative;
      background-color: #fffb00;
      color: #000000;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.5rem;
      border: solid 5px rgb(202, 188, 3);
      border-radius: 5px;
      cursor: pointer;
      transition: transform 0.2s ease, background-color 0.3s;
    }

    .cell.toggled {
      background-color: #000000 !important;
      color: #ffffff;
         border:5px solid rgb(255, 255, 255);
    }

    .cell.toggled::after {
      content: attr(data-num);
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translateX(-50%) translateY(-50%);
      font-size: 3rem;
      font-weight: 500;
      color: #ff0000;
      border-radius: 50%;
      animation: pop 0.3s forwards;
      pointer-events: none;
      z-index: 1000;
    }

    @keyframes pop {
      0% {
        transform: translate(-50%, -50%) scale(0);
        opacity: 0;
      }

      25% {
        transform: translate(-50%, -50%) scale(2);
        opacity: 1;
      }

      50% {
        transform: translate(-50%, -50%) scale(4);
        opacity: 1;
      }

      75% {
        transform: translate(-50%, -50%) scale(8);
        opacity: 0;
      }

      100% {
        transform: translate(-50%, -50%) scale(10);
        opacity: 0;
      }
    }

    .controllers {
      margin-top: 10px;
      display: flex;
      align-items: center;
      justify-content: space-around;
      gap: 10px;
      flex-wrap: wrap;
      background: rgba(0, 66, 57, 0.874);
      border-top: 2px solid black;
    }

    .controll {
   
      font-size: 1.1rem;
      background-color:#1a4265;
      border: none;
      color: #ecf0f1;
      padding: 10px 18px;
      border-radius: 10px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      transition: all 0.3s;
      border: solid 3px rgb(255, 255, 255);
    }

    .controll:hover {
      background-color: #7e8a00;
      transform: scale(1.05);
      color: #000;
    }

    .play {
   font-size: 25px;
   line-height: 30px;
      background-color:#1a4265;
     padding: 30px 70px;
     letter-spacing: 3px;
     font-weight: 900;
      height: 30px;
    }

    .play:hover {
      background-color: 04498e;
      
    }

    .input-box {
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .input-label {
      font-size: 1.2rem;
    color: #000;
    }

    .input-group {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 5px;
      margin-bottom: 10px;
    }

    .display-input {
      background-color: #ecf0f1;
      color: #000000;
      border: solid 3px rgb(255, 255, 255);
   
      width: 150px;
      height: 35px;
      font-size: 1rem;
      border-radius: 5px;
      text-align: center;
      font-weight: bold;
      box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .icon-button {
      background-color:#1a4265;
      color: white;
   border: solid 3px rgb(255, 255, 255);
      border-radius: 6px;
      padding: 10px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s, transform 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 50px;
      height: 30px;
    }

    .icon-button:hover {
      background-color: #1e8449;
      transform: scale(1.1);
    }
  </style>
</head>

<body>

 <%- include ('partials/header') -%>
  <div class="main_cont bingo_grid">
    <div class="bingo_pik_card">
      <h1><i class="fas fa-dice"></i> Pick a Card</h1>
    </div>
    <div class="bingo_numbers"></div>
  </div>

  <div class="main_cont controllers">

    <!-- ZG Input -->
    <div class="input-box">
      <span class="input-label"><i class="fas fa-layer-group"></i> ZG</span>
      <div class="input-group">
        <button class="icon-button" onclick="adjustValue('zg', -1)"><i class="fas fa-minus"></i></button>
        <input name="zg" type="text" id="zg" class="display-input" value="1" readonly>
        <button class="icon-button" onclick="adjustValue('zg', 1)"><i class="fas fa-plus"></i></button>
      </div>
    </div>

    <!-- Bet Birr Input -->
    <div class="input-box">
      <span class="input-label"><i class="fas fa-coins"></i> Bet Birr</span>
      <div class="input-group">
        <button class="icon-button" onclick="adjustValue('birr', -5)"><i class="fas fa-minus"></i></button>
        <input name="bet" type="text" id="birr" class="display-input" value="10" readonly>
        <button class="icon-button" onclick="adjustValue('birr', 5)"><i class="fas fa-plus"></i></button>
      </div>
    </div>

    <!-- Functional Buttons -->
    <button class="controll play" onclick="submitPlay()">Play</button>
    <button class="controll" onclick="startConsoleInput()"><i class="fas fa-sync-alt"></i>Inter Cartelas</button>
    <button class="controll" id="sync"><i class="fas fa-random"></i>Sync Previous</button>
  </div>

  <script>
          const grid = document.querySelector(".bingo_numbers");
          const selectedCells = new Set();

          // Generate 150 cards
          for (let i = 1; i <= 150; i++) {
            const cell = document.createElement("div");
            cell.className = "cell";
            cell.textContent = i;
            cell.setAttribute("data-num", i);
            cell.onclick = () => toggleCell(i, cell); // Ensure toggleCell is defined
            grid.appendChild(cell);
          }

          function toggleCell(number, cell) {
            if (selectedCells.has(number)) {
              selectedCells.delete(number);
              cell.classList.remove("toggled");
            } else {
              selectedCells.add(number);
              cell.classList.add("toggled");
            }
          }

          // Sync and other functionalities
          document.getElementById('sync').addEventListener('click', () => {
            const savedPayload = localStorage.getItem('gamePayload');
            if (!savedPayload) {
              alert("No saved data found.");
              return;
            }

            const payload = JSON.parse(savedPayload);
            const lineChakerInput = document.getElementById('zg');
            const betBirrInput = document.getElementById('birr');

            if (lineChakerInput) lineChakerInput.value = payload.linechaker || '';
            if (betBirrInput) betBirrInput.value = payload.betbirr || '';

            const selectedCarts = payload.selectedcarts || [];
            document.querySelectorAll('.cell').forEach(cell => {
              const cellId = Number(cell.dataset.num);
              if (selectedCarts.includes(cellId)) {
                cell.classList.add('toggled');
              } else {
                cell.classList.remove('toggled');
              }
            });

            selectedCells.clear();
            selectedCarts.forEach(num => selectedCells.add(num));
          });


    function submitPlay() {
      const zValue = parseInt(document.getElementById("zg").value);
      const bet = parseInt(document.getElementById("birr").value);

      if (!zValue || !bet || selectedCells.size === 0) {
        alert("Please select cards and fill bet details.");
        return;
      }

      const payload = {
        selectedcarts: Array.from(selectedCells),
        linechaker: zValue,
        betbirr: bet,
      };

      localStorage.setItem('gamePayload', JSON.stringify(payload));

      fetch("/home", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      })
        .then((res) => {
          if (res.redirected) {
            console.log({
              selectedcarts: Array.from(selectedCells),
              linechaker: zValue,
              betbirr: bet,
            })
            window.location.href = res.url;
          } else {
            return res.json();
          }
        })
        .then((data) => {
          console.log("Server response:", data);
        })
        .catch((err) => {
          console.error("Error submitting play:", err);
        });
    }

    function adjustValue(field, change) {
      const input = document.getElementById(field);
      let value = parseInt(input.value) || 0;
      let newValue = value + change;

      if (field === "zg") {
        input.value = Math.max(1, Math.min(5, newValue));
      } else {
        input.value = Math.max(10, newValue);
      }
    }




    
    // Optional prompt-based card selection
    let consoleActive = false;

    function startConsoleInput() {
      consoleActive = true;
      handleConsoleInput();
    }

    function handleConsoleInput() {
      if (!consoleActive) return;

      setTimeout(() => {
        const input = prompt("Select Card (type 'ok' to finish):");

        if (input === null || input.toLowerCase() === "ok") {
          consoleActive = false;
          return;
        }

        const num = parseInt(input.trim());

        if (isNaN(num) || num < 1 || num > 150) {
          alert("Card unavailable");
        } else if (selectedCells.has(num)) {
          alert("Already picked, thank you");
        } else {
          selectedCells.add(num);
          grid.children[num - 1].classList.add("toggled");
        }

        handleConsoleInput();
      }, 100);
    }
  </script>

</body>

</html>

